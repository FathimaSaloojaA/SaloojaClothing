<div class="product-form-container">
  <h2>Add New Product</h2>
  <form id="addProductForm" action="/admin/products/add" method="POST" enctype="multipart/form-data">
    <% if (typeof error !== 'undefined') { %>
  <div class="error-message" style="color: #e74c3c;
  background-color: #fcebea;
  border: 1px solid #e0b4b4;
  padding: 10px;
  margin-bottom: 15px;
  border-radius: 5px;
  font-weight: 500;"><%= error %></div>
<% } %>
    <div class="form-group">
      <label for="name">Product Name:</label>
      <input type="text" name="name" id="name" required>
    </div>

    <div class="form-group">
      <label for="description">Description:</label>
      <textarea name="description" id="description" rows="4" required></textarea>
    </div>

    
    
<div class="form-group">
  <label for="category">Category:</label>
  <select name="category" id="category" onchange="handleCategoryChange()" required>
    <option value="">-- Select Category --</option>
    <% categories.forEach(cat => { %>
      <option value="<%= cat._id %>"><%= cat.name %></option>
    <% }) %>
  </select>
</div>

<div class="form-group">
  <label for="subcategory">Subcategory:</label>
  <select name="subcategory" id="subcategory" required>
    <option value="">-- Select Subcategory --</option>
  </select>
</div>



    <div class="form-group">
      <label for="highlights">Highlights (comma-separated):</label>
      <input type="text" name="highlights" id="highlights">
    </div>
    <div class="form-group">
  <label for="price">Price:</label>
  <input type="number" name="price" id="price" min="0" required>
</div>

<div class="form-group">
  <label for="stock">Stock:</label>
  <input type="number" name="stock" id="stock" min="0" required>
</div>

<div class="form-group">
  <label for="images">Product Images (Max 3):</label>
  <input type="file" name="productImages" id="images" multiple accept="image/*" required>
</div>


    <div class="form-group">
      <label for="couponNote">Coupon Note:</label>
      <input type="text" name="couponNote" id="couponNote">
    </div>

    <div class="form-group">
      <label for="discountPercentage">Discount %:</label>
      <input type="number" name="discountPercentage" id="discountPercentage" min="0" max="100">
    </div>

    
<button type="submit" id="realSubmitBtn" style="display: none;"></button>

    <div class="form-group">
      <button type="submit">Add Product</button>
    </div>
  </form>

</div>
<script>
  const allSubcategories = <%- JSON.stringify(subcategories) %>;
  


  function getElement(id) {
    return document.getElementById(id);
  }

  function clearDropdown(selectElement) {
    selectElement.innerHTML = '<option value="">-- Select Subcategory --</option>';
  }

  function populateSubcategories(subcategories) {
    const subcategoryDropdown = getElement('subcategory');
    clearDropdown(subcategoryDropdown);

    subcategories.forEach(sub => {
      const option = document.createElement('option');
      option.value = sub._id;
      option.textContent = sub.name;
      subcategoryDropdown.appendChild(option);
    });
  }

  function filterSubcategoriesByCategory(categoryId) {
    return allSubcategories.filter(sub => {
      return String(sub.category?._id || sub.category) === String(categoryId);
    });
  }

  function handleCategoryChange() {
    const selectedCategoryId = getElement('category').value;
    const filtered = filterSubcategoriesByCategory(selectedCategoryId);
    populateSubcategories(filtered);
  }

const form = document.getElementById('addProductForm');

  form.addEventListener('submit', function(e) {
    e.preventDefault();  // prevent default submit initially

    const name = document.getElementById('name').value.trim();
  const price = parseFloat(document.getElementById('price').value);
  const stock = parseInt(document.getElementById('stock').value);
  const discount = parseFloat(document.getElementById('discountPercentage').value || '0');

  if (!name) {
    return Swal.fire('Error', 'Product name cannot be empty.', 'error');
  }

  if (isNaN(price) || price < 0) {
    return Swal.fire('Error', 'Price must be a non-negative number.', 'error');
  }

  if (isNaN(stock) || stock < 0) {
    return Swal.fire('Error', 'Stock must be a non-negative number.', 'error');
  }

  if (discount >= 90) {
    return Swal.fire('Error', 'Discount should be less than 90%.', 'error');
  }

  const imageInput = document.getElementById('images');
  if (!imageInput.files.length || imageInput.files.length > 3) {
    return Swal.fire('Error', 'Upload 1 to 3 product images.', 'error');
  }

    // If all validations pass, submit the form
    form.submit()
  });

</script>


