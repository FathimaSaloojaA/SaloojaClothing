<div class="checkout-container">
  <h2 class="title">🛒 Checkout</h2>

  <!-- 🔶 Address Section -->
  <div class="section address-section">
    <h3>Select Delivery Address</h3>
    
    <div class="address-list">
      <% addresses.forEach(addr => { %>
        <div class="address-card <%= addr._id.toString() === defaultAddressId ? 'selected' : '' %>">
          <input type="radio" name="selectedAddress" value="<%= addr._id %>" 
            <%= addr._id.toString() === defaultAddressId ? 'checked' : '' %> />
          <div class="details">
            <p><%= addr.street %>, <%= addr.city %></p>
            <p><%= addr.state %> - <%= addr.zip %></p>
            <p><%= addr.country %></p>
          </div>
          <button class="edit-btn" data-id="<%= addr._id %>">✏️ Edit</button>
        </div>
      <% }) %>
    </div>

    <!-- 🔶 Add Address Button -->
    <button class="add-address-toggle">➕ Add New Address</button>

    <!-- 🔶 Add Address Form (Hidden initially) -->
    <form action="/checkout/add-address" method="POST" class="address-form hidden" id="addAddressForm">
      <input type="text" name="street" placeholder="Street" required />
      <input type="text" name="city" placeholder="City" required />
      <input type="text" name="state" placeholder="State" required />
      <input type="text" name="zip" placeholder="ZIP Code" required />
      <input type="text" name="country" placeholder="Country" required />
      <button type="submit">Save Address</button>
    </form>

    <!-- 🔶 Edit Address Form Placeholder (Rendered via JS) -->
    <div id="editAddressContainer"></div>
  </div>

  <!-- 🛍️ Cart Summary -->
  <div class="section cart-section">
    <h3>Your Items</h3>
    <div class="cart-table">
      <% cartItems.forEach(item => { %>
        <div class="cart-item">
          <img src="<%= item.image %>" alt="<%= item.name %>">
          <div class="info">
            <h4><%= item.name %></h4>
            <% if (item.discountPercent > 0) { %>
              <p class="price">₹<%= item.discountedPrice.toFixed(2) %> 
                <span class="original">₹<%= item.originalPrice.toFixed(2) %></span>
              </p>
            <% } else { %>
              <p class="price">₹<%= item.originalPrice.toFixed(2) %></p>
            <% } %>
            <p>Qty: <%= item.quantity %></p>
            <p>Total: ₹<%= item.itemTotal.toFixed(2) %></p>
            <% if (item.couponNote) { %><small class="note">Coupon: <%= item.couponNote %></small><% } %>
          </div>
        </div>
      <% }) %>
    </div>
  </div>

  <!-- 💰 Price Summary -->
  <div class="section summary-section">
    <h3>Price Details</h3>

    <!-- 🎟️ Coupon Section -->
     <% if (couponError) { %>
  <p class="coupon-error"><%= couponError %></p>
<% } %>

<div class="coupon-box">
  <% if (!appliedCoupon) { %>
    <form action="/checkout/apply-coupon" method="POST" class="coupon-form">
      <input type="text" name="couponCode" placeholder="Enter coupon code" required>
      <button type="submit">Apply</button>
    </form>
  <% } else { %>
    <div class="applied-coupon">
      ✅ Coupon "<strong><%= appliedCoupon.code %></strong>" applied
      (<%= appliedCoupon.discountType === 'percentage' ? appliedCoupon.discountValue + '%' : '₹' + appliedCoupon.discountValue %> off)
      <form action="/checkout/remove-coupon" method="POST" style="display:inline;">
        <button type="submit" class="remove-btn">Remove</button>
      </form>
    </div>
  <% } %>
</div>

<% if (availableCoupons && availableCoupons.length > 0 && !appliedCoupon) { %>
  <div class="suggested-coupons">
    <h4>Available Coupons</h4>
    <ul>
      <% availableCoupons.forEach(c => { %>
        <li>
          <strong><%= c.code %></strong> -
          <%= c.discountType === 'percentage' ? c.discountValue + '%' : '₹' + c.discountValue %> off
          (Min: ₹<%= c.minPurchase %>) - expires on <%= new Date(c.expiryDate).toLocaleDateString() %>
        </li>
      <% }) %>
    </ul>
  </div>
<% } %>


    <ul>
      <li>Subtotal: ₹<%= subtotal.toFixed(2) %></li>
      <li>Tax: ₹<%= tax.toFixed(2) %></li>
      <li>Discount: - ₹<%= discount.toFixed(2) %></li>
      <li>Shipping: ₹<%= shipping.toFixed(2) %></li>
      <li class="final">Total: ₹<%= finalTotal.toFixed(2) %></li>
    </ul>

    <!-- 💳 Payment Method -->
<div class="section payment-section">
  <h3>Select Payment Method</h3>

  <div class="payment-options">
    <label class="payment-option selected">
      <input type="radio" name="paymentMethod" value="Cash on Delivery" checked />
      <div class="card">
        <span class="emoji">💵</span>
        <span class="text">Cash on Delivery</span>
      </div>
    </label>

    <label class="payment-option disabled">
      <input type="radio" name="paymentMethod" value="UPI" disabled />
      <div class="card">
        <span class="emoji">📱</span>
        <span class="text">UPI (Coming Soon)</span>
      </div>
    </label>

    <label class="payment-option disabled">
      <input type="radio" name="paymentMethod" value="Card" disabled />
      <div class="card">
        <span class="emoji">💳</span>
        <span class="text">Credit/Debit Card</span>
      </div>
    </label>
  </div>
</div>


    <form action="/checkout/place-order" method="POST">
      <input type="hidden" name="selectedAddress" value="<%= defaultAddressId %>" id="selectedAddressInput">
      <button type="submit" class="place-order-btn">📦 Place Order - COD</button>
    </form>
  </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
  const addAddressBtn = document.querySelector('.add-address-toggle');
  const addAddressForm = document.getElementById('addAddressForm');
  const editAddressContainer = document.getElementById('editAddressContainer');
  const editButtons = document.querySelectorAll('.edit-btn');
  const radioInputs = document.querySelectorAll('input[name="selectedAddress"]');
  const selectedAddressInput = document.getElementById('selectedAddressInput');

  // ✅ Toggle Add Address Form
  addAddressBtn.addEventListener('click', () => {
    addAddressForm.classList.toggle('hidden');
    addAddressBtn.textContent = addAddressForm.classList.contains('hidden') ? '➕ Add New Address' : '✖️ Cancel';
  });

  // ✅ Update Selected Address Hidden Input
  radioInputs.forEach(radio => {
    radio.addEventListener('change', () => {
      selectedAddressInput.value = radio.value;
    });
  });

  // ✅ Handle Inline Edit Button
  editButtons.forEach(button => {
    button.addEventListener('click', async (e) => {
      const addressId = button.getAttribute('data-id');

      try {
        // Fetch address details from server
        const response = await fetch(`/checkout/address/${addressId}`);
        const data = await response.json();

        if (data.success) {
          const address = data.address;

          // Generate and insert editable form inline
          editAddressContainer.innerHTML = `
            <form action="/checkout/edit-address/${address._id}" method="POST" class="address-form" style="margin-top: 1rem;">
              <input type="text" name="street" value="${address.street}" required />
              <input type="text" name="city" value="${address.city}" required />
              <input type="text" name="state" value="${address.state}" required />
              <input type="text" name="zip" value="${address.zip}" required />
              <input type="text" name="country" value="${address.country}" required />
              <button type="submit">Update Address</button>
              <button type="button" class="cancel-edit-btn" style="background:#ddd; color:#333; margin-left:10px;">Cancel</button>
            </form>
          `;

          // Cancel button functionality
          document.querySelector('.cancel-edit-btn').addEventListener('click', () => {
            editAddressContainer.innerHTML = '';
          });
        } else {
          alert("Couldn't fetch address data.");
        }
      } catch (error) {
        console.error("Error fetching address:", error);
        alert("Something went wrong.");
      }
    });
  });
});

function createError(input, message) {
    clearError(input);

    input.classList.add('invalid-input');
    const error = document.createElement('div');
    error.className = 'error-msg';
    error.innerText = message;
    input.insertAdjacentElement('afterend', error);
  }

  function clearError(input) {
    input.classList.remove('invalid-input');
    const next = input.nextElementSibling;
    if (next && next.classList.contains('error-msg')) {
      next.remove();
    }
  }

  function validateAddressForm(form) {
  const fields = form.querySelectorAll('input[type="text"]');
  let valid = true;

  const onlyAlphabetsRegex = /^[A-Za-z\s]+$/;

  fields.forEach(input => {
    clearError(input);
    const value = input.value.trim();
    const name = input.name;

    if (value === '' || /^\s+$/.test(value)) {
      createError(input, `${capitalize(name)} cannot be empty or just spaces.`);
      valid = false;
    } else if (name === 'zip') {
      if (!/^\d{5,10}$/.test(value)) {
        createError(input, "ZIP Code must be 5 to 10 digits.");
        valid = false;
      }
    } else if (['street', 'city', 'state', 'country'].includes(name)) {
      if (!onlyAlphabetsRegex.test(value)) {
        createError(input, `${capitalize(name)} must contain only alphabets.`);
        valid = false;
      }
    }
  });

  return valid;
}


  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  // ✅ Add Address Form Validation
  document.getElementById('addAddressForm')?.addEventListener('submit', function (e) {
    if (!validateAddressForm(this)) e.preventDefault();
  });

  // ✅ Attach validation to dynamically inserted Edit Address Form
  const editAddressObserver = new MutationObserver(() => {
    const editForm = document.querySelector('#editAddressContainer form');
    if (editForm) {
      editForm.addEventListener('submit', function (e) {
        if (!validateAddressForm(this)) e.preventDefault();
      });

      // Clear errors on input
      editForm.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', () => clearError(input));
      });
    }
  });

  editAddressObserver.observe(document.getElementById('editAddressContainer'), {
    childList: true,
    subtree: true
  });

  // Clear errors on Add form too
  document.querySelectorAll('#addAddressForm input')?.forEach(input => {
    input.addEventListener('input', () => clearError(input));
  });

</script>