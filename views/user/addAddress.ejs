<div class="address-form-container">
  <div class="address-form-card">
    <h2>Add New Address</h2>

    <% if (error === 'duplicate') { %>
  <p class="error-msg" style="color:red; margin-bottom:10px;">This address already exists.</p>
<% } else if (error === 'server') { %>
  <p class="error-msg" style="color:red; margin-bottom:10px;">Something went wrong. Please try again.</p>
<% } %>

    <form action="/add-address" method="POST" id="addAddressForm">
      <div class="form-group">
        <label for="street">Street</label>
        <input type="text" id="street" name="street" required>
      </div>

      <div class="form-group">
        <label for="city">City</label>
        <input type="text" id="city" name="city" required>
      </div>

      <div class="form-group">
        <label for="state">State</label>
        <input type="text" id="state" name="state" required>
      </div>

      <div class="form-group">
        <label for="zip">Zip Code</label>
        <input type="text" id="zip" name="zip" required>
      </div>

      <div class="form-group">
        <label for="country">Country</label>
        <input type="text" id="country" name="country" required>
      </div>

      <button type="submit" class="submit-btn">Save Address</button>
    </form>
  </div>
</div>
<script>
  function getElement(id) {
    return document.getElementById(id);
  }

  function showError(input, message) {
    input.classList.add('is-invalid');
    input.classList.remove('is-valid');

    let errorDiv = input.nextElementSibling;
    if (!errorDiv || !errorDiv.classList.contains('invalid-feedback')) {
      errorDiv = document.createElement('div');
      errorDiv.className = 'invalid-feedback';
      errorDiv.innerText = message;
      input.parentNode.appendChild(errorDiv);
    } else {
      errorDiv.innerText = message;
    }
  }

  function clearError(input) {
    input.classList.remove('is-invalid');
    input.classList.add('is-valid');

    const errorDiv = input.nextElementSibling;
    if (errorDiv && errorDiv.classList.contains('invalid-feedback')) {
      errorDiv.remove();
    }
  }

  function validateField(input, name) {
  const value = input.value.trim();
  const onlyAlphabetsRegex = /^[A-Za-z\s]+$/;

  if (value === '' || /^\s+$/.test(value)) {
    showError(input, `${name} cannot be empty or just spaces`);
    return false;
  } else if (['Street', 'City', 'State', 'Country'].includes(name) && !onlyAlphabetsRegex.test(value)) {
    showError(input, `${name} must contain only alphabets`);
    return false;
  }

  clearError(input);
  return true;
}



  function validateZip(input) {
    const value = input.value.trim();
    const zipRegex = /^\d{5,10}$/; // Allow 5 to 10 digits (adjust as needed)

    if (!zipRegex.test(value)) {
      showError(input, `Zip Code must be 5-10 digits`);
      return false;
    }
    clearError(input);
    return true;
  }

  function handleAddressValidation(event) {
    const street = getElement('street');
    const city = getElement('city');
    const state = getElement('state');
    const zip = getElement('zip');
    const country = getElement('country');
    const submitBtn = document.querySelector('.submit-btn');

    let isValid = true;

    if (!validateField(street, 'Street')) isValid = false;
    if (!validateField(city, 'City')) isValid = false;
    if (!validateField(state, 'State')) isValid = false;
    if (!validateZip(zip)) isValid = false;
    if (!validateField(country, 'Country')) isValid = false;

    if (!isValid) {
      event.preventDefault(); // stop submission if any field is invalid
      return;
    }

    // disable button and show loading if valid
    submitBtn.disabled = true;
    submitBtn.textContent = 'Saving...';
  }

  function attachValidation() {
    const form = getElement('addAddressForm');
    if (form) {
      form.addEventListener('submit', handleAddressValidation);
    }
  }

  window.onload = attachValidation;
</script>
